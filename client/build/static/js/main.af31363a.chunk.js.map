{"version":3,"sources":["components/headerComponent/header.js","actions/outputPageActions.js","actions/inputPageActions.js","actions/blockPageActions.js","actions/transactionPageActions.js","components/headerComponent/header_components.js","components/paginationComponent/pagination.js","components/scrollButtonComponent/scrollButton.js","components/contentComponent/transactions/transactions.js","components/contentComponent/transactions/transactionDetails.js","components/contentComponent/blocks/blocks.js","components/contentComponent/blocks/blockDetails.js","components/contentComponent/inputs/inputs.js","components/contentComponent/inputs/inputDetails.js","components/contentComponent/outputs/outputs.js","components/contentComponent/outputs/outputDetails.js","components/contentComponent/about/about.js","main.js","components/footerComponent/footer.js","serviceWorker.js","index.js"],"names":["Header","toggleCollapse","setState","isOpen","state","dark","expand","onClick","this","id","navbar","left","to","Component","fetchOutputsData","axios","get","method","mode","fetchInputsData","fetchBlocksData","fetchTransactionsData","HeaderComponents","props","blocks_count","txs_count","inputs_count","outputs_count","getData","bind","then","json","console","log","transactions","data","length","catch","err","error","blocks","inputs","outputs","className","LEFT_PAGE","RIGHT_PAGE","range","from","step","index","push","Pagination","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","handleClick","evt","preventDefault","handleMoveLeft","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","ceil","map","key","href","aria-label","aria-hidden","e","ScrollButton","intervalId","window","pageYOffset","clearInterval","scroll","scrollStepInPx","setInterval","scrollStep","delayInMs","title","scrollToTop","Transactions","allTransactions","offset","currentTransactions","slice","totalTransactions","join","trim","transaction","tx_index","currency","hash","block_number","moment","time","format","TransactionDetails","isNull","value","onButtonClick","textToCopy","onCopied","text","fetchTransactionDataById","match","params","fee","pow","toFixed","block_hash","gas","gas_price","belonging_to","nonce","relayed_by","Blocks","allBlocks","currentBlocks","totalBlocks","block","block_index","n_tx","BlockDetails","allTransactionsInBlock","currentTransactionsInBlock","undefined","fetchBlockDataById","filtered","filter","el","parseInt","totalTransactionsInBlock","merkle_root","previous_block","difficulty","size","Inputs","allInputs","currentInputs","totalInputs","input","id_input","tx_hash","InputDetails","fetchInputDataById","address","Outputs","allOutputs","currentOutputs","totalOutputs","output","id_output","OutputDetails","fetchOutputDataById","About","Main","newTransactions","isOldestFirst","sort","a","b","event","reverse","exact","path","component","Block","Transaction","Input","Output","Footer","color","Date","getFullYear","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af31363a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {\n    MDBCollapse,\n    MDBDropdown,\n    MDBDropdownItem,\n    MDBDropdownMenu,\n    MDBDropdownToggle,\n    MDBFormInline,\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBNavbarNav,\n    MDBNavbarToggler,\n    MDBNavItem,\n    MDBNavLink\n} from \"mdbreact\";\n\nclass Header extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            isOpen: false\n        };\n\n    }\n\n\n    toggleCollapse = () => {\n        this.setState({isOpen: !this.state.isOpen});\n    };\n\n\n    render() {\n\n        return (\n            <MDBNavbar dark expand=\"md\">\n\n                <MDBNavbarBrand>\n                    Blockchain\n                </MDBNavbarBrand>\n\n                <MDBNavbarToggler onClick={this.toggleCollapse}/>\n\n                <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n                    <MDBNavbarNav left>\n\n                        <MDBNavItem>\n                            <MDBNavLink to=\"/blocks\">Blocks</MDBNavLink>\n                        </MDBNavItem>\n\n                        <MDBNavItem>\n                            <MDBNavLink to=\"/transactions\">Transactions</MDBNavLink>\n                        </MDBNavItem>\n\n                        <MDBNavItem>\n                            <MDBNavLink to=\"/inputs\">Inputs</MDBNavLink>\n                        </MDBNavItem>\n\n                        <MDBNavItem>\n                            <MDBNavLink to=\"/outputs\">Ouputs</MDBNavLink>\n                        </MDBNavItem>\n\n                        <MDBNavItem>\n                            <MDBNavLink to=\"/about\">About</MDBNavLink>\n                        </MDBNavItem>\n\n                    </MDBNavbarNav>\n\n                </MDBCollapse>\n            </MDBNavbar>\n        );\n    }\n}\n\nexport default Header;\n","//   Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell a browser to let a web\n//   application running at one origin (domain) have permission to access selected resources from a server at a different\n//   origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different\n//   origin (domain, protocol, and port) than its own origin.\n\nimport axios from 'axios';\n\nexport function fetchOutputsData() {\n    return axios.get('http://localhost:8000/outputs/', {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}\n\nexport function fetchOutputDataById(id) {\n    return axios.get('http://localhost:8000/output/' + `${id}`, {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}","//   Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell a browser to let a web\n//   application running at one origin (domain) have permission to access selected resources from a server at a different\n//   origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different\n//   origin (domain, protocol, and port) than its own origin.\n\nimport axios from 'axios';\n\nexport function fetchInputsData() {\n    return axios.get('http://localhost:8000/inputs/', {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}\n\nexport function fetchInputDataById(id) {\n    return axios.get('http://localhost:8000/input/' + `${id}`, {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}","// @ts-nocheck\n//   Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell a browser to let a web\n//   application running at one origin (domain) have permission to access selected resources from a server at a different\n//   origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different\n//   origin (domain, protocol, and port) than its own origin.\n\nimport axios from 'axios';\n\nexport function fetchBlocksData() {\n    var config = {\n        headers: {'Access-Control-Allow-Origin': '*'}\n    };\n    return axios.get('http://localhost:8000/blocks/', {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}\n\nexport function fetchBlockDataById(id) {\n    return axios.get('http://localhost:8000/block/' + `${id}`, {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}","//   Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell a browser to let a web\n//   application running at one origin (domain) have permission to access selected resources from a server at a different\n//   origin. A web application executes a cross-origin HTTP request when it requests a resource that has a different\n//   origin (domain, protocol, and port) than its own origin.\n\nimport axios from 'axios';\n\nexport function fetchTransactionsData() {\n    return axios.get('http://localhost:8000/transactions/', {\n        method: 'GET', // \"Accept\": \"application/json\"\n        mode: 'CORS'\n    });\n}\n\nexport function fetchTransactionDataById(id) {\n    return axios.get(`http://localhost:8000/transaction/${id}`, {\n        method: 'GET',\n        mode: 'CORS'\n    });\n}\n","import React, {Component} from \"react\";\n// styling\nimport {MDBCol, MDBContainer, MDBFormInline, MDBNavbarNav, MDBNavItem, MDBRow} from 'mdbreact';\n// actions\nimport {fetchOutputsData} from '../../actions/outputPageActions';\nimport {fetchInputsData} from '../../actions/inputPageActions';\nimport {fetchBlocksData} from '../../actions/blockPageActions';\nimport {fetchTransactionsData} from '../../actions/transactionPageActions';\n\nclass HeaderComponents extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n           blocks_count: null,\n           txs_count: null,\n           inputs_count: null,\n           outputs_count: null,\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n    // Method for fetching data\n\n    getData() {\n        const {blocks_count, txs_count, inputs_count, outputs_count} = this.state;\n\n        fetchTransactionsData()\n                    .then(json => {\n                        console.log('data', json);\n                        const transactions = json.data;\n\n                        this.setState({\n                            txs_count: transactions.length\n                        });\n                    })\n                    .catch(err => {\n                        console.error('err', err);\n                    });\n\n        fetchBlocksData()\n                            .then(json => {\n                                console.log('data', json);\n                                const blocks = json.data;\n\n                                this.setState({\n                                    blocks_count: blocks.length\n                                });\n                            })\n                            .catch(err => {\n                                console.error('err', err);\n                            });\n\n        fetchInputsData()\n                            .then(json => {\n                                console.log('data', json);\n                                const inputs = json.data;\n\n                                this.setState({\n                                    inputs_count: inputs.length\n                                });\n                            })\n                            .catch(err => {\n                                console.error('err', err);\n                            });\n\n        fetchOutputsData()\n                             .then(json => {\n                                 console.log('data', json);\n                                 const outputs = json.data;\n\n                                 this.setState({\n                                     outputs_count: outputs.length\n                                 });\n                             })\n                             .catch(err => {\n                                 console.error('err', err);\n                             });\n    };\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    render() {\n        const {blocks_count, txs_count, inputs_count, outputs_count} = this.state;\n\n        return (\n            <MDBContainer className=\"header_components_container\">\n                <MDBRow className=\"header_components_upper_row\">\n                    <MDBCol className=\"header_components_col\">\n                        <MDBRow className=\"header_components_upper_row\">current blocks</MDBRow>\n                        <MDBRow className=\"header_components_lower_row\">{blocks_count}</MDBRow>\n                    </MDBCol>\n                    <MDBCol className=\"header_components_col\">\n                        <MDBRow className=\"header_components_upper_row\">transactions</MDBRow>\n                        <MDBRow className=\"header_components_lower_row\">{txs_count}</MDBRow>\n                    </MDBCol>\n                    <MDBCol className=\"header_components_col\">\n                        <MDBRow className=\"header_components_upper_row\">inputs</MDBRow>\n                        <MDBRow className=\"header_components_lower_row\">{inputs_count}</MDBRow>\n                    </MDBCol>\n                    <MDBCol className=\"header_components_col\">\n                        <MDBRow className=\"header_components_upper_row\">outputs</MDBRow>\n                        <MDBRow className=\"header_components_lower_row\">{outputs_count}</MDBRow>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n\n        );\n    };\n}\n\nexport default HeaderComponents;\n","// public source for Pagination: https://codesandbox.io/s/condescending-browser-14yp5\n\nimport React, {Component, Fragment} from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nconst range = (from, to, step = 1) => {\n    let index = from;\n    const range = [];\n\n    while (index <= to) {\n        range.push(index);\n        index += step;\n    }\n\n    return range;\n};\n\n\nclass Pagination extends Component {\n\n    constructor(props) {\n        super(props);\n        const {totalRecords = null, pageLimit = 100, pageNeighbours = 0} = props;\n\n        this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 100;\n        this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\n\n        this.pageNeighbours =\n            typeof pageNeighbours === \"number\"\n                ? Math.max(0, Math.min(pageNeighbours, 2))\n                : 0;\n\n        this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n        this.state = {currentPage: 1};\n    }\n\n    componentDidMount() {\n        this.gotoPage(1);\n    }\n\n    gotoPage = page => {\n        const {onPageChanged = f => f} = this.props;\n\n        const currentPage = Math.max(0, Math.min(page, this.totalPages));\n\n        const paginationData = {\n            currentPage,\n            totalPages: this.totalPages,\n            pageLimit: this.pageLimit,\n            totalRecords: this.totalRecords\n        };\n\n        this.setState({currentPage}, () => onPageChanged(paginationData));\n    };\n\n    handleClick = (page, evt) => {\n        evt.preventDefault();\n        this.gotoPage(page);\n    };\n\n    handleMoveLeft = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n    };\n\n    handleMoveRight = evt => {\n        evt.preventDefault();\n        this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n    };\n\n    fetchPageNumbers = () => {\n        const totalPages = this.totalPages;\n        const currentPage = this.state.currentPage;\n        const pageNeighbours = this.pageNeighbours;\n\n        const totalNumbers = this.pageNeighbours * 2 + 3;\n        const totalBlocks = totalNumbers + 2;\n\n        if (totalPages > totalBlocks) {\n            let pages = [];\n\n            const leftBound = currentPage - pageNeighbours;\n            const rightBound = currentPage + pageNeighbours;\n            const beforeLastPage = totalPages - 1;\n\n            const startPage = leftBound > 2 ? leftBound : 2;\n            const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n\n            pages = range(startPage, endPage);\n\n            const pagesCount = pages.length;\n            const singleSpillOffset = totalNumbers - pagesCount - 1;\n\n            const leftSpill = startPage > 2;\n            const rightSpill = endPage < beforeLastPage;\n\n            const leftSpillPage = LEFT_PAGE;\n            const rightSpillPage = RIGHT_PAGE;\n\n            if (leftSpill && !rightSpill) {\n                const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n                pages = [leftSpillPage, ...extraPages, ...pages];\n            } else if (!leftSpill && rightSpill) {\n                const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n                pages = [...pages, ...extraPages, rightSpillPage];\n            } else if (leftSpill && rightSpill) {\n                pages = [leftSpillPage, ...pages, rightSpillPage];\n            }\n\n            return [1, ...pages, totalPages];\n        }\n\n        return range(1, totalPages);\n    };\n\n    render() {\n        if (!this.totalRecords) return null;\n\n        if (this.totalPages === 1) return null;\n\n        const {currentPage} = this.state;\n        const pages = this.fetchPageNumbers();\n\n        return (\n            <Fragment>\n                <div className=\"pagination_container\">\n                    <ul className=\"pagination\">\n                        {pages.map((page, index) => {\n                            if (page === LEFT_PAGE)\n                                return (\n                                    <li key={index} className=\"page-item\">\n                                        <a\n                                            className=\"page-link\"\n                                            href=\"#\"\n                                            aria-label=\"Previous\"\n                                            onClick={this.handleMoveLeft}\n                                        >\n                                            <span aria-hidden=\"true\">&laquo;</span>\n                                            <span className=\"sr-only\">Previous</span>\n                                        </a>\n                                    </li>\n                                );\n\n                            if (page === RIGHT_PAGE)\n                                return (\n                                    <li key={index} className=\"page-item\">\n                                        <a\n                                            className=\"page-link\"\n                                            href=\"#\"\n                                            aria-label=\"Next\"\n                                            onClick={this.handleMoveRight}\n                                        >\n                                            <span aria-hidden=\"true\">&raquo;</span>\n                                            <span className=\"sr-only\">Next</span>\n                                        </a>\n                                    </li>\n                                );\n\n                            return (\n                                <li\n                                    key={index}\n                                    className={`page-item${\n                                        currentPage === page ? \" active\" : \"\"\n                                        }`}\n                                >\n                                    <a\n                                        className=\"page-link\"\n                                        href=\"#\"\n                                        onClick={e => this.handleClick(page, e)}\n                                    >\n                                        {page}\n                                    </a>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nPagination.propTypes = {\n    totalRecords: PropTypes.number.isRequired,\n    pageLimit: PropTypes.number,\n    pageNeighbours: PropTypes.number,\n    onPageChanged: PropTypes.func\n};\n\nexport default Pagination;","import React, {Component} from 'react';\n\nclass ScrollButton extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            intervalId: 0\n        };\n    };\n\n    scrollStep() {\n        if (window.pageYOffset === 0) {\n            clearInterval(this.state.intervalId)\n        }\n        window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n    };\n\n    scrollToTop() {\n        let intervalId = setInterval(this.scrollStep.bind(this), this.props.delayInMs);\n        this.setState({intervalId: intervalId});\n    };\n\n    render() {\n        return (\n\n            <button title='scrollButton' className='scroll'\n                    onClick={() => {\n                        this.scrollToTop()\n                    }}>\n                <span className='arrow-up fa fa-lg fa-chevron-up'/>\n            </button>\n\n        );\n    };\n}\n\nexport default ScrollButton;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport moment from 'moment';\n// styling\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\n// components\nimport Pagination from '../../paginationComponent/pagination';\n// actions\nimport ScrollButton from '../../scrollButtonComponent/scrollButton';\nimport {fetchTransactionsData} from '../../../actions/transactionPageActions';\n\n\n\nclass Transactions extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // set initial state\n            allTransactions: [],\n            currentTransactions: [],\n            currentPage: null,\n            totalPages: null\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n\n    // Method for fetching data\n\n    getData() {\n        const {allTransactions} = this.state;\n\n        fetchTransactionsData()\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    allTransactions: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    onPageChanged = data => {\n        const {allTransactions} = this.state;\n        const {currentPage, pageLimit} = data;\n\n        const offset = (currentPage - 1) * pageLimit;\n        const currentTransactions = allTransactions.slice(offset, offset + pageLimit);\n\n        this.setState({currentPage, currentTransactions});\n    };\n\n    // Render the page\n\n    render() {\n        const { allTransactions, currentTransactions, currentPage} = this.state;\n\n        const totalTransactions = allTransactions.length;\n\n        if (totalTransactions === 0) return null;\n\n        const headerClass = [\n            \"text-dark py-2 pr-4 m-0\",\n            currentPage ? \"border-gray border-right\" : \"\"\n        ]\n            .join(\" \")\n            .trim();\n\n        return (\n\n            <MDBContainer>\n\n                {currentTransactions.map((transaction, index) => {\n                    return (\n\n                        <MDBContainer className=\"page_content_container\" key={index}>\n                            <Link to={'/transaction/' + `${transaction.tx_index}`}>\n\n                                <MDBRow className=\"upper_row\">\n                                    <MDBCol className=\"col-lg-6 hash\">{transaction.currency} address</MDBCol>\n\n                                    <MDBCol className=\"col-2 col-sm-3\">\n                                        <MDBBtn className=\"transactions\">Transaction {transaction.tx_index}</MDBBtn>\n                                    </MDBCol>\n\n                                    <MDBCol className=\"col-2 col-sm-1\">Block</MDBCol>\n\n                                    <MDBCol className=\"col-lg\">Received time:</MDBCol>\n                                </MDBRow>\n\n                                <MDBRow className=\"lower_row\">\n                                    <MDBCol className=\"col-lg-6 hash\">{transaction.hash}</MDBCol>\n\n                                    <MDBCol className=\"col-2 col-sm-3\"></MDBCol>\n\n                                    <MDBCol className=\"col-2 col-sm-1\">{transaction.block_number}</MDBCol>\n\n                                    <MDBCol className=\"col-lg\">\n                                        {moment(transaction.time).format('DD-MM-YYYY h:mm:ss')}\n                                    </MDBCol>\n                                </MDBRow>\n\n                            </Link>\n                        </MDBContainer>\n\n                    );\n                })}\n\n                <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\"/>\n\n                <Pagination\n                    totalRecords={totalTransactions}\n                    pageLimit={30}\n                    pageNeighbours={1}\n                    onPageChanged={this.onPageChanged}\n                />\n\n\n            </MDBContainer>\n        );\n\n    };\n\n}\n\n\nexport default Transactions;\n\n","import React, {Component} from 'react';\nimport CopyText from 'react-copy-text';\nimport moment from 'moment';\n// actions\nimport {fetchTransactionDataById} from '../../../actions/transactionPageActions';\n// styling\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\nimport {Link} from 'react-router-dom';\n\n\nclass TransactionDetails extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // set initial state\n            transaction: [],\n            textToCopy: '' // onButtonClick method\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n    // Check if the value is null\n\n    isNull = (value) => {\n\n        if (value === null) {\n            return true;\n        }\n\n        return false;\n    };\n\n    // Button OnClick\n\n    onButtonClick = (value) => {\n\n        this.setState({\n            textToCopy: `${value}`\n        });\n    };\n\n    // Copy on clipboard\n\n    onCopied = (text) => {\n        console.log(`${text} was copied to the clipboard`);\n    };\n\n    // Method for fetching data\n\n    getData() {\n        const {transaction} = this.state;\n        const {id} = this.props.match.params;\n\n        fetchTransactionDataById(id)\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    transaction: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n\n    render() {\n\n        const {transaction} = this.state;\n        const {id} = this.props.match.params;\n\n\n        return (\n            <MDBContainer>\n                <MDBContainer className=\"page_label_container\">\n                    <MDBRow>\n                        <Link to={`/transactions/`}>\n                            <MDBCol className=\"col_back \">\n                                Back\n                            </MDBCol>\n                        </Link>\n                        <MDBCol className=\"col_title\">\n                            {transaction.title}\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n\n                <MDBContainer className=\"page_content_container\">\n\n                    <MDBRow className=\"upper_row\">\n                        <MDBCol className=\"col-lg-7\">address</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">fee</MDBCol>\n                        <MDBCol className=\"col-lg-3 received_time\">Received time:</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row\">\n                        <MDBCol className=\"col-lg-7\">{transaction.hash}</MDBCol>\n                          <MDBCol className=\"col-2 col-sm-2 hash\">{transaction.currency === \"ETH\" ? (transaction.fee * Math.pow(10, -18)).toFixed(6) : transaction.fee} {transaction.currency}</MDBCol>\n                        <MDBCol className=\"col-lg-3 received_time\">\n                            {moment(transaction.time).format('MM-DD-YYYY h:mm:ss')}\n                        </MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"upper_row hash\">\n                        <MDBCol className=\"col-lg-7 hash\">block {transaction.block_number} hash</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">gas</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">gas price</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row_info hash\">\n                        <MDBCol className=\"col-lg-7 hash\">{transaction.block_hash}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">{transaction.gas}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">{transaction.gas_price}</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"upper_row hash\">\n                        <MDBCol className=\"col-lg-7 hash\">from address</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">value</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">nonce</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row_info hash\">\n                        <MDBCol className=\"col-lg-7 hash\">{(() => this.isNull(transaction.belonging_to)) ? \"0x\" : transaction.belonging_to}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2 hash\">\n                            {(() => this.isNull(transaction.value)) ? (0) : (transaction.value)}\n                        </MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">\n                            {(() => this.isNull(transaction.nonce)) ? (0) : (transaction.nonce)}\n                        </MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"upper_row hash\">\n                        <MDBCol className=\"col-lg-7 hash\">to contract address</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row_info hash\">\n                        <MDBCol className=\"col-lg-7 hash\">{(() => this.isNull(transaction.relayed_by)) ? \"0x\" : transaction.relayed_by}</MDBCol>\n                    </MDBRow>\n\n                </MDBContainer>\n\n                <MDBContainer className=\"page_content_container\">\n                    <MDBRow className=\"upper_row unhash\">\n                        <MDBCol>Copy info: </MDBCol>\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(transaction.belonging_to)}>\n                            <i className=\"fas fa-address-card\"></i> from address\n                        </MDBBtn>\n\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(transaction.relayed_by)}>\n                            <i className=\"fas fa-address-card\"></i> to contract address\n                        </MDBBtn>\n\n                        <MDBBtn className=\"unhash\"\n                                onClick={() => this.onButtonClick((() => this.isNull(transaction.gas)) ? (0) : transaction.gas)}>\n                            gas\n                        </MDBBtn>\n\n                        <CopyText text={this.state.textToCopy} onCopied={this.onCopied}/>\n\n                    </MDBRow>\n\n                </MDBContainer>\n\n            </MDBContainer>\n        );\n    }\n}\n\nexport default TransactionDetails","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport moment from 'moment';\n// styling\nimport {MDBCol, MDBContainer, MDBRow} from 'mdbreact';\n// components\nimport Pagination from '../../paginationComponent/pagination';\nimport ScrollButton from '../../scrollButtonComponent/scrollButton';\n// actions\nimport {fetchBlocksData, fetchBlockDataById} from '../../../actions/blockPageActions';\n\n\nclass Blocks extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { // set initial state\n            allBlocks: [],\n            currentBlocks: [],\n            currentPage: null,\n            totalPages: null\n        };\n\n        this.getData = this.getData.bind(this);\n    }\n\n\n    // Method for fetching data\n\n    getData() {\n        const {allBlocks} = this.state;\n\n        fetchBlocksData()\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    allBlocks: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    // Pagination\n\n    onPageChanged = data => {\n        const {allBlocks} = this.state;\n        const {currentPage, totalPages, pageLimit} = data;\n\n        const offset = (currentPage - 1) * pageLimit;\n        const currentBlocks = allBlocks.slice(offset, offset + pageLimit);\n\n        this.setState({currentPage, currentBlocks, totalPages});\n    };\n\n    // Render the page\n\n    render() {\n        const {\n            allBlocks,\n            currentBlocks,\n            currentPage,\n            totalPages\n        } = this.state;\n\n        const totalBlocks = allBlocks.length;\n\n        if (totalBlocks === 0) return null;\n\n        const headerClass = [\n            \"text-dark py-2 pr-4 m-0\",\n            currentPage ? \"border-gray border-right\" : \"\"\n        ]\n            .join(\" \")\n            .trim();\n\n        return (\n\n            <MDBContainer>\n\n                {currentBlocks.map((block, index) => {\n                    return (\n                        <MDBContainer className=\"page_content_container\" key={index}>\n                            <Link to={'/block/' + `${block.block_index}`}>\n                                <MDBRow className=\"upper_row\">\n                                    <MDBCol className=\"col-lg-6 hash\">{block.currency} address</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-1\">Block</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-2\">TX count</MDBCol>\n                                    <MDBCol className=\"col-lg\">Recieved time:</MDBCol>\n                                </MDBRow>\n                                <MDBRow className=\"lower_row\">\n                                    <MDBCol className=\"col-lg-6 hash\">{block.hash}</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-1\">{block.block_index}</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-2\">{block.n_tx}</MDBCol>\n                                    <MDBCol className=\"col-lg\">\n                                        {moment(block.time).format('DD-MM-YYYY h:mm:ss')}\n                                    </MDBCol>\n                                </MDBRow>\n                            </Link>\n                        </MDBContainer>\n\n                    );\n                })}\n\n                <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\"/>\n\n                <Pagination\n                    totalRecords={totalBlocks}\n                    pageLimit={15}\n                    pageNeighbours={1}\n                    onPageChanged={this.onPageChanged}\n                />\n\n            </MDBContainer>\n\n\n        );\n\n    }\n}\n\n\nexport default Blocks;\n\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport CopyText from 'react-copy-text';\nimport moment from 'moment';\n// styling\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\n// components\nimport Pagination from '../../paginationComponent/pagination';\nimport ScrollButton from '../../scrollButtonComponent/scrollButton';\n// actions\nimport {fetchBlockDataById} from '../../../actions/blockPageActions';\nimport {fetchTransactionsData} from \"../../../actions/transactionPageActions\";\n\nclass BlockDetails extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // set initial state\n            block: [],\n            allTransactionsInBlock: [],\n            currentTransactionsInBlock: [],\n            currentPage: null,\n            totalPages: null,\n            textToCopy: ''\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n\n    // Method for fetching data\n\n    getData() {\n        const {block, allTransactionsInBlock} = this.state;\n        const {id} = this.props.match.params;\n\n        fetchBlockDataById(id)\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    block: json.data\n                });\n            })\n            .catch(err => {\n                console.error('err', err);\n            });\n\n        fetchTransactionsData()\n            .then(json => {\n                console.log('data', json);\n                const transactions = json.data;\n\n                var filtered = transactions.filter(function (el) {\n                    return el.block_number === parseInt(id);\n                });\n\n                this.setState({\n                    allTransactionsInBlock: filtered\n                });\n            })\n            .catch(err => {\n                console.error('err', err);\n            });\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    onPageChanged = data => {\n        const {allTransactionsInBlock} = this.state;\n        const {currentPage, totalPages, pageLimit} = data;\n\n        const offset = (currentPage - 1) * pageLimit;\n        const currentTransactionsInBlock = allTransactionsInBlock.slice(offset, offset + pageLimit);\n\n        this.setState({currentPage, currentTransactionsInBlock, totalPages});\n    };\n\n    // Button OnClick\n\n    onButtonClick = (value) => {\n        if (value !== undefined && value !== null) {\n            this.setState({\n                textToCopy: `${value}`\n            });\n        }\n    };\n\n    // Copy on clipboard\n\n    onCopied = (text) => {\n        console.log(`${text} was copied to the clipboard`);\n    };\n\n    render() {\n        const {block, allTransactionsInBlock, currentTransactionsInBlock, currentPage} = this.state;\n        const {id} = this.props.match.params;\n\n        const totalTransactionsInBlock = allTransactionsInBlock.length;\n\n        if (totalTransactionsInBlock === 0) return null;\n\n        const headerClass = [\n            \"text-dark py-2 pr-4 m-0\",\n            currentPage ? \"border-gray border-right\" : \"\"\n        ]\n            .join(\" \")\n            .trim();\n\n        return (\n\n            <MDBContainer>\n\n                <MDBContainer className=\"page_label_container\">\n                    <MDBRow>\n                        <Link to={`/blocks/`}>\n                            <MDBCol className=\"col_back \">\n                                Back\n                            </MDBCol>\n                        </Link>\n                        <MDBCol className=\"col_title\">\n                            {block.title}\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n\n\n                <MDBContainer className=\"page_content_container\">\n\n                    <MDBRow className=\"upper_row\">\n                        <MDBCol className=\"col-lg-6 hash\">{block.currency} address</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-1\">Block</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2\">TX count</MDBCol>\n                        <MDBCol className=\"col-lg-3\">Received time:</MDBCol>\n\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row\">\n                        <MDBCol className=\"col-lg-6 hash\">{block.hash}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-1\">{block.block_index}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-2\">{block.n_tx}</MDBCol>\n                        <MDBCol className=\"col-lg-3\">\n                            {moment(block.time).format('MM-DD-YYYY h:mm:ss')}\n                        </MDBCol>\n                    </MDBRow>\n\n\n                    <MDBRow className=\"upper_row hash\">\n                        <MDBCol className=\"col-lg-6 hash\">merkle root</MDBCol>\n                        <MDBCol className=\"col-lg-6 hash\">previous block</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row_info hash\">\n                        <MDBCol className=\"col-lg-6 hash\">{block.merkle_root}</MDBCol>\n                        <MDBCol className=\"col-lg-6 hash\">{block.previous_block}</MDBCol>\n                    </MDBRow>\n\n\n                    <MDBRow className=\"upper_row hash\">\n                        <MDBCol className=\"col-2 col-sm-3 hash\">nonce</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">size</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">{block.difficulty ? \"difficulty\" : \"\"}</MDBCol>\n                    </MDBRow>\n\n                    <MDBRow className=\"lower_row_info hash\">\n                        <MDBCol className=\"col-2 col-sm-3 hash\">\n                            {block.nonce ? block.nonce : (0)}\n                        </MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">{block.size}</MDBCol>\n                        <MDBCol className=\"col-2 col-sm-3 hash\">\n                            {block.difficulty ? block.difficulty : \"\"}\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n\n\n                <MDBContainer className=\"page_content_container\">\n\n                    <MDBRow className=\"lower_row_info unhash\">\n\n                        <MDBCol>Copy info:</MDBCol>\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(block.hash)}>\n                            hash\n                        </MDBBtn>\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(block.size)}>\n                            size\n                        </MDBBtn>\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(block.nonce ? block.nonce : (0))}>\n                            nonce\n                        </MDBBtn>\n\n                        <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(block.previous_block)}>\n                            previous block\n                        </MDBBtn>\n\n                        <CopyText text={this.state.textToCopy} onCopied={this.onCopied}/>\n\n                    </MDBRow>\n\n                </MDBContainer>\n\n                    <MDBContainer className=\"page_label_container\">\n                        <MDBRow>\n                            <MDBCol className=\"label_title\">\n                                Transactions in the Block\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBContainer>\n\n                <MDBContainer>\n\n                    {currentTransactionsInBlock.map((transaction, index) => {\n                        return (\n\n                            <MDBContainer className=\"page_content_container\" key={index}>\n                                <Link to={'/transaction/' + `${transaction.tx_index}`}>\n                                    <MDBRow className=\"upper_row\">\n\n                                        <MDBCol className=\"col-2 col-sm-4\">\n                                            <MDBBtn className=\"transactions\">Transaction {transaction.tx_index}</MDBBtn>\n                                        </MDBCol>\n\n                                        <MDBCol className=\"col-lg-6 hash\">address</MDBCol>\n\n                                        <MDBCol className=\"col-sm-2\">fee</MDBCol>\n\n                                    </MDBRow>\n\n                                    <MDBRow className=\"lower_row_info\">\n\n                                        <MDBCol className=\"col-2 col-sm-4\"></MDBCol>\n\n                                        <MDBCol className=\"col-lg-6 hash\">0x{transaction.hash}</MDBCol>\n\n                                        <MDBCol\n                                            className=\"col-2 col-sm-2\">{transaction.currency === \"ETH\" ? (transaction.fee * Math.pow(10, -18)).toFixed(6) : transaction.fee} {transaction.currency}</MDBCol>\n\n                                    </MDBRow>\n\n                                </Link>\n                            </MDBContainer>\n\n                        );\n                    })}\n\n                    <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\"/>\n\n                    <Pagination\n                        totalRecords={totalTransactionsInBlock}\n                        pageLimit={50}\n                        pageNeighbours={1}\n                        onPageChanged={this.onPageChanged}\n                    />\n\n                </MDBContainer>\n\n            </MDBContainer>\n        );\n    };\n}\n\nexport default BlockDetails;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport moment from 'moment';\n// styling\nimport {MDBCol, MDBContainer, MDBRow} from 'mdbreact';\n// components\nimport Pagination from '../../paginationComponent/pagination';\nimport ScrollButton from '../../scrollButtonComponent/scrollButton';\n// actions\nimport {fetchInputsData} from '../../../actions/inputPageActions';\n\nclass Inputs extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { // set initial state\n            allInputs: [],\n            currentInputs: [],\n            currentPage: null,\n            totalPages: null\n        };\n\n        this.getData = this.getData.bind(this);\n    }\n\n\n    // Method for fetching data\n\n    getData() {\n        const {allInputs} = this.state;\n\n        fetchInputsData()\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    allInputs: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    // Pagination\n\n    onPageChanged = data => {\n        const {allInputs} = this.state;\n        const {currentPage, totalPages, pageLimit} = data;\n\n        const offset = (currentPage - 1) * pageLimit;\n        const currentInputs = allInputs.slice(offset, offset + pageLimit);\n\n        this.setState({currentPage, currentInputs, totalPages});\n    };\n\n    // Render the page\n\n    render() {\n        const {\n            allInputs,\n            currentInputs,\n            currentPage,\n            totalPages\n        } = this.state;\n\n        const totalInputs = allInputs.length;\n\n        if (totalInputs === 0) return null;\n\n        const headerClass = [\n            \"text-dark py-2 pr-4 m-0\",\n            currentPage ? \"border-gray border-right\" : \"\"\n        ]\n            .join(\" \")\n            .trim();\n\n        return (\n\n            <MDBContainer>\n\n                {currentInputs.map((input, index) => {\n                    return (\n                        <MDBContainer className=\"page_content_container\" key={index}>\n                            <Link to={'/input/' + `${input.id_input}`}>\n                                <MDBRow className=\"upper_row\">\n                                    <MDBCol className=\"col-lg-10 hash\">transaction address</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-1\">transaction</MDBCol>\n                                </MDBRow>\n                                <MDBRow className=\"lower_row\">\n                                    <MDBCol className=\" st col-lg-10 hash\">{input.tx_hash}</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-1\">{input.transaction}</MDBCol>\n                                </MDBRow>\n                            </Link>\n                        </MDBContainer>\n\n                    );\n                })}\n\n                <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\"/>\n\n                <Pagination\n                    totalRecords={totalInputs}\n                    pageLimit={15}\n                    pageNeighbours={1}\n                    onPageChanged={this.onPageChanged}\n                />\n\n            </MDBContainer>\n\n\n        );\n\n    }\n}\n\n\nexport default Inputs;\n\n","import React, {Component} from 'react';\nimport CopyText from 'react-copy-text';\nimport moment from 'moment';\n// actions\nimport {fetchInputDataById} from '../../../actions/inputPageActions';\n// styling\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\nimport {Link} from 'react-router-dom';\n\n\nclass InputDetails extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // set initial state\n            input: [],\n            textToCopy: '' // onButtonClick method\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n    // Button OnClick\n\n    onButtonClick = (value) => {\n\n        this.setState({\n            textToCopy: `${value}`\n        });\n    };\n\n    // Copy on clipboard\n\n    onCopied = (text) => {\n        console.log(`${text} was copied to the clipboard`);\n    };\n\n\n    // Method for fetching data\n\n    getData() {\n        const {input} = this.state;\n        const {id} = this.props.match.params;\n\n        fetchInputDataById(id)\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    input: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n\n    render() {\n\n        const {input} = this.state;\n        const {id} = this.props.match.params;\n\n\n        return (\n            <MDBContainer>\n\n                <MDBContainer className=\"page_label_container\">\n                    <MDBRow>\n                        <Link to={'/inputs/'}>\n                            <MDBCol className=\"col_back \">\n                                Back\n                            </MDBCol>\n                        </Link>\n                        <MDBCol className=\"col_title\">\n                            Input {input.id_input}\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n\n                <MDBContainer className=\"page_content_container\">\n\n                        <MDBRow className=\"upper_row\">\n                            <MDBCol className=\"col-lg-7 hash\">from address</MDBCol>\n                            <MDBCol className=\"col-2 col-sm-3\">transaction inx</MDBCol>\n                        </MDBRow>\n\n                        <MDBRow className=\"lower_row\">\n                            <MDBCol className=\" st col-lg-7 hash\">{input.address}</MDBCol>\n                            <MDBCol className=\"col-2 col-sm-3\">{input.transaction}</MDBCol>\n                        </MDBRow>\n                </MDBContainer>\n\n                 <MDBContainer className=\"page_content_container\">\n                        <MDBRow className=\"upper_row unhash\">\n                            <MDBCol>Copy info: </MDBCol>\n\n                            <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(input.address)}>\n                                <i className=\"fas fa-address-card\"></i> from address\n                            </MDBBtn>\n\n                            <CopyText text={this.state.textToCopy} onCopied={this.onCopied}/>\n                        </MDBRow>\n                 </MDBContainer>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default InputDetails","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport moment from 'moment';\n// styling\nimport {MDBCol, MDBContainer, MDBRow} from 'mdbreact';\n// components\nimport Pagination from '../../paginationComponent/pagination';\nimport ScrollButton from '../../scrollButtonComponent/scrollButton';\n// actions\nimport {fetchOutputsData} from '../../../actions/outputPageActions';\n\nclass Outputs extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { // set initial state\n            allOutputs: [],\n            currentOutputs: [],\n            currentPage: null,\n            totalPages: null\n        };\n\n        this.getData = this.getData.bind(this);\n    }\n\n\n    // Method for fetching data\n\n    getData() {\n        const {allOutputs} = this.state;\n\n        fetchOutputsData()\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    allOutputs: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n    // Pagination\n\n    onPageChanged = data => {\n        const {allOutputs} = this.state;\n        const {currentPage, totalPages, pageLimit} = data;\n\n        const offset = (currentPage - 1) * pageLimit;\n        const currentOutputs = allOutputs.slice(offset, offset + pageLimit);\n\n        this.setState({currentPage, currentOutputs, totalPages});\n    };\n\n    // Render the page\n\n    render() {\n        const {\n            allOutputs,\n            currentOutputs,\n            currentPage,\n            totalPages\n        } = this.state;\n\n        const totalOutputs = allOutputs.length;\n\n        if (totalOutputs === 0) return null;\n\n        const headerClass = [\n            \"text-dark py-2 pr-4 m-0\",\n            currentPage ? \"border-gray border-right\" : \"\"\n        ]\n            .join(\" \")\n            .trim();\n\n        return (\n\n            <MDBContainer>\n\n                {currentOutputs.map((output, index) => {\n                    return (\n                        <MDBContainer className=\"page_content_container\" key={index}>\n                            <Link to={'/output/' + `${output.id_output}`}>\n                                <MDBRow className=\"upper_row\">\n                                    <MDBCol className=\"col-lg-6 hash\">transaction address</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-2\">transaction</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-4\">value</MDBCol>\n                                </MDBRow>\n\n                                <MDBRow className=\"lower_row\">\n                                    <MDBCol className=\" st col-lg-6 hash\">{output.tx_hash}</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-2\">{output.transaction}</MDBCol>\n                                    <MDBCol className=\"col-2 col-sm-4\">{output.value} satoshis</MDBCol>\n                                </MDBRow>\n                            </Link>\n                        </MDBContainer>\n\n                    );\n                })}\n\n                <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16\"/>\n\n                <Pagination\n                    totalRecords={totalOutputs}\n                    pageLimit={15}\n                    pageNeighbours={1}\n                    onPageChanged={this.onPageChanged}\n                />\n\n            </MDBContainer>\n\n\n        );\n\n    }\n}\n\n\nexport default Outputs;\n\n","import React, {Component} from 'react';\nimport CopyText from 'react-copy-text';\nimport moment from 'moment';\n// actions\nimport {fetchOutputDataById} from '../../../actions/outputPageActions';\n// styling\nimport {MDBBtn, MDBCol, MDBContainer, MDBRow} from 'mdbreact';\nimport {Link} from 'react-router-dom';\n\n\nclass OutputDetails extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // set initial state\n            output: [],\n            textToCopy: '' // onButtonClick method\n        };\n\n        this.getData = this.getData.bind(this);\n    };\n\n    // Button OnClick\n\n    onButtonClick = (value) => {\n\n        this.setState({\n            textToCopy: `${value}`\n        });\n    };\n\n    // Copy on clipboard\n\n    onCopied = (text) => {\n        console.log(`${text} was copied to the clipboard`);\n    };\n\n\n    // Method for fetching data\n\n    getData() {\n        const {output} = this.state;\n        const {id} = this.props.match.params;\n\n        fetchOutputDataById(id)\n            .then(json => {\n                console.log('data', json);\n                this.setState({\n                    output: json.data\n                })\n            })\n            .catch(err => {\n                console.error('err', err)\n            });\n\n    };\n\n\n    componentDidMount() { // lifecycle method\n        this.getData();\n    };\n\n\n    render() {\n\n        const {output} = this.state;\n        const {id} = this.props.match.params;\n\n\n        return (\n            <MDBContainer>\n\n                <MDBContainer className=\"page_label_container\">\n                    <MDBRow>\n                        <Link to={`/outputs/`}>\n                            <MDBCol className=\"col_back \">\n                                Back\n                            </MDBCol>\n                        </Link>\n                        <MDBCol className=\"col_title\">\n                            Output {output.id_output}\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n\n            <MDBContainer className=\"page_content_container\">\n                 <Link to={'/outputs/'}>\n                     <MDBRow className=\"upper_row\">\n                         <MDBCol className=\"col-lg-6 hash\">transaction address</MDBCol>\n                         <MDBCol className=\"col-2 col-sm-2\">transaction</MDBCol>\n                         <MDBCol className=\"col-2 col-sm-4\">value</MDBCol>\n                     </MDBRow>\n\n                     <MDBRow className=\"lower_row\">\n                         <MDBCol className=\" st col-lg-6 hash\">{output.tx_hash}</MDBCol>\n                         <MDBCol className=\"col-2 col-sm-2\">{output.transaction}</MDBCol>\n                         <MDBCol className=\"col-2 col-sm-4\">{output.value} satoshis</MDBCol>\n                     </MDBRow>\n                 </Link>\n            </MDBContainer>\n\n                 <MDBContainer className=\"page_content_container\">\n                        <MDBRow className=\"upper_row unhash\">\n                            <MDBCol>Copy info: </MDBCol>\n\n                            <MDBBtn className=\"unhash\" onClick={() => this.onButtonClick(output.tx_hash)}>\n                                <i className=\"fas fa-address-card\"></i> transaction address\n                            </MDBBtn>\n\n                            <CopyText text={this.state.textToCopy} onCopied={this.onCopied}/>\n                        </MDBRow>\n                 </MDBContainer>\n            </MDBContainer>\n        );\n    }\n}\n\nexport default OutputDetails","import React, {Component} from 'react';\nimport { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput, MDBBtn, MDBIcon, MDBModalFooter } from 'mdbreact';\n\n\nclass About extends Component{\n    render () {\n        return(\n            <MDBContainer className=\"about\">\n              <MDBRow>\n                <MDBCol className=\"col-lg\">\n                  <MDBCard>\n                    <MDBCardBody className=\"mx-4\">\n                      <div className=\"text-center\">\n                        <h3 className=\"dark-grey-text mb-5\">\n                          <strong>How does a blockchain technology work?</strong>\n                        </h3>\n                        </div>\n                        <div className=\"text\">\n                        <p>A central aspect of blockchain technology is the distributed ledger, which contains a record of all previous transactions. It is called a distributed ledger because it is not stored in a central location, rather it is stored across a network of computers across the world. Key to the operation of a distributed ledger is ensuring the entire network collectively agrees with the contents of the ledger; this is the job of the consensus mechanism.</p>\n                        <p>&nbsp;</p>\n                        <p>Behind many cryptoassets, there is a consensus mechanism. The purpose of a consensus mechanism is to verify that information being added to the ledger is valid i.e. the network is in consensus. This ensures that the next block being added represents the most current transactions on the network, preventing double spending and other invalid data from being appended to the blockchain. In addition, the consensus mechanism keeps the network from being derailed through constant forking.</p>\n                        <p>&nbsp;</p>\n                        <p>There have been a number of different consensus mechanisms devised, each with their own pros and cons. They all serve the same core purpose as described above, but differ in methodology. The primary difference between varying consensus mechanisms is the way in which they delegate and reward the verification of transactions.</p>\n                      </div>\n                    </MDBCardBody>\n                  </MDBCard>\n                </MDBCol>\n              </MDBRow>\n            </MDBContainer>\n        );\n    };\n}\nexport default About;","// using CommonJS modules\nimport React, {Component} from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {MDBContainer} from 'mdbreact';\n// components\nimport Header from './components/headerComponent/header';\nimport HeaderComponents from './components/headerComponent/header_components';\n// transactions\nimport Transactions from './components/contentComponent/transactions/transactions';\nimport Transaction from './components/contentComponent/transactions/transactionDetails';\n// blocks\nimport Blocks from './components/contentComponent/blocks/blocks';\nimport Block from './components/contentComponent/blocks/blockDetails';\n// inputs\nimport Inputs from './components/contentComponent/inputs/inputs';\nimport Input from './components/contentComponent/inputs/inputDetails';\n// outputs\nimport Outputs from './components/contentComponent/outputs/outputs';\nimport Output from './components/contentComponent/outputs/outputDetails';\n// about page\nimport About from './components/contentComponent/about/about';\n// includes\nimport './assets/css/default.min.css';\n\n\nclass Main extends Component {\n\n    // Sort by transaction block_number\n\n    sortByBlockNumber() {\n        const {transactions} = this.state;\n        let newTransactions = transactions;\n\n        if (this.state.isOldestFirst) {\n            newTransactions = transactions.sort((a, b) => a.block_number > b.block_number);\n        } else {\n            newTransactions = transactions.sort((a, b) => a.block_number < b.block_number);\n        }\n\n        this.setState({\n            isOldestFirst: !this.state.isOldestFirst,\n            transactions: newTransactions\n        });\n    }\n\n\n    // Reverse transaction order\n\n    toggleListReverse(event) {\n        const {transactions} = this.state;\n        let newTransactions = transactions.reverse();\n        this.setState({\n            transactions: newTransactions\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Router>\n                    <div className=\"content\">\n\n                        {/* Navbar */}\n                        <Header/>\n                        <HeaderComponents/>\n\n                        {/* Content */}\n                        <MDBContainer className=\"content-inside\">\n\n                            {/* Homepage links to Blocks*/}\n                            <Route exact path={'/'} component={Blocks}/>\n\n                            {/* About page*/}\n                            <Route exact path={'/about'} component={About}/>\n\n                            {/* List of Blocks & Block/id Details */}\n                            <Route exact path={'/blocks'} component={Blocks}/>\n                            <Route exact path={'/block/:id'} component={Block}/>\n\n                            {/* List of Transactions & Transaction/id Details */}\n                            <Route exact path={'/transactions'} component={Transactions}/>\n                            <Route exact path={'/transaction/:id'} component={Transaction}/>\n\n                            {/* List of Inputs & Input/id Details */}\n                            <Route exact path='/inputs' component={Inputs}/>\n                            <Route exact path='/input/:id' component={Input}/>\n\n                            {/* List of Transactions & Transaction/id Details */}\n                            <Route exact path={'/outputs'} component={Outputs}/>\n                            <Route exact path={'/output/:id'} component={Output}/>\n\n                        </MDBContainer>\n\n                    </div>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n\n","import React from \"react\";\nimport {MDBContainer, MDBFooter} from \"mdbreact\";\n\nconst Footer = () => {\n    return (\n        <MDBFooter color=\"indigo\" className=\"font-small pt-0\">\n            <div className=\"footer-copyright text-center py-3\">\n                <MDBContainer className=\"footer_content\">\n                    &copy; {new Date().getFullYear()} Copyright:\n                    <a href=\"https://github.com/constantinss?tab=repositories\"> GitHub.com </a>\n                </MDBContainer>\n            </div>\n        </MDBFooter>\n    );\n};\n\nexport default Footer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './main';\nimport Footer from './components/footerComponent/footer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('main'));\nReactDOM.render(<Footer />, document.getElementById('footer'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}